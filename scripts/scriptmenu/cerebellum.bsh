import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Point2D;
import org.simbrain.network.NetworkComponent;
import org.simbrain.network.core.*;
import org.simbrain.network.connections.*;
import org.simbrain.network.groups.*;
import org.simbrain.network.desktop.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.synapse_update_rules.*;
import org.simbrain.workspace.*;
import org.simbrain.util.*;
import org.simbrain.plot.timeseries.*;
import org.simbrain.docviewer.*;
import javax.swing.JInternalFrame;
import java.util.concurrent.*;
import java.util.*;
import javax.swing.JSlider.*;

//
// Public Variables
//
int NUM_NEURONS = 35;
double GRID_SPACE = 40;
public int currentTrialLength = 200;
public boolean toggleLearning = true;

//
// Set up the simulation
//
void main() {
	workspace.clearWorkspace();
    buildNetwork();
    loadCustomUpdater();
    makeButtons();
    addTimeSeries();
    addDocViewer();
}

//
// Build network
//
void buildNetwork() {

    // Parameters 

    // Set up network
    Network network = new Network();
    NetworkComponent networkComponent = new NetworkComponent("Cerebellum", network);
    workspace.addWorkspaceComponent(networkComponent);
    desktop.getDesktopComponent(networkComponent).getParentFrame().setBounds(332,10,550,600);
    
	DecayRule generalRule = new DecayRule();
	generalRule.setDecayFraction(.25);
	
	DecayRule DCNRule = new DecayRule();
	DCNRule.setDecayFraction(.25);
	DCNRule.setBaseLine(1);
	
	DecayRule inferiorOliveRule = new DecayRule();
	inferiorOliveRule.setDecayFraction(.25);
	inferiorOliveRule.setBaseLine(.3);
	
	DecayRule targetRule = new DecayRule();
	targetRule.setDecayFraction(0);
	targetRule.setDecayAmount(0);
	targetRule.setBaseLine(0);
	
    // Cortex (assume it's at 0,0)
    NeuronGroup cortex = new NeuronGroup(network, 1);
    cortex.setLabel("Cerebral Cortex");
    cortex.setNeuronType(generalRule);
	cortex.setLocation(50, 0);
    cortex.setLowerBound(0);
	network.addGroup(cortex);
	
    // Red Nucleus
    NeuronGroup redNucleus = new NeuronGroup(network, 2);
    redNucleus.setLabel("Red Nucleus");
    redNucleus.setNeuronType(generalRule);
    redNucleus.setLocation(50, 200);
    redNucleus.setLowerBound(0);
    network.addGroup(redNucleus);

    // Cortex to Red Nucleus
    network.addSynapse(new Synapse(cortex.getNeuronList().get(0), redNucleus.getNeuronList().get(0), 1));

    // Inferior Olive
    Neuron inferiorOlive = new Neuron(network, new DecayRule());
    inferiorOlive.setLabel("Inferior Olive");
    inferiorOlive.setUpdateRule(inferiorOliveRule);
    inferiorOlive.setLocation(200, 275);
    inferiorOlive.setLowerBound(0);
	inferiorOlive.forceSetActivation(0.3);
    network.addNeuron(inferiorOlive);

    // Red Nucleus to Inf. Olive
    network.addSynapse(new Synapse(redNucleus.getNeuronList().get(0), inferiorOlive, 1));

    // To Spinal Cord
    NeuronGroup toSpinalCord = new NeuronGroup(network, 2);
    toSpinalCord.setLabel("To Spinal Cord");
    toSpinalCord.setNeuronType(generalRule);
    toSpinalCord.setLocation(-25, 275);
    toSpinalCord.setLowerBound(0);
    network.addGroup(toSpinalCord);
    
    // Cortex to Spinal Cord
    network.addSynapse(new Synapse(cortex.getNeuronList().get(0), toSpinalCord.getNeuronList().get(0), 1));

    // Red Nucleus to Spinal Cord
    network.addSynapse(new Synapse(redNucleus.getNeuronList().get(1), toSpinalCord.getNeuronList().get(1), 1));
    
    // Output
    Neuron output = new Neuron(network, new DecayRule());
    output.setLabel("Output");
    output.setUpdateRule(generalRule);
    output.setLocation(0, 325);
    output.setLowerBound(0);
    network.addNeuron(output);

    // Spinal Cord to Output
    network.addSynapse(new Synapse(toSpinalCord.getNeuronList().get(0), output, 1));
    network.addSynapse(new Synapse(toSpinalCord.getNeuronList().get(1), output, 1));

    // Thalamus
    Neuron thalamus = new Neuron(network);
    thalamus.setLabel("Thalamus");
    thalamus.setUpdateRule(generalRule);
    thalamus.setLocation(100, 100);
    thalamus.setLowerBound(0);
    network.addNeuron(thalamus);

    // Thalamus to Cortex
    network.addSynapse(new Synapse(thalamus, cortex.getNeuronList().get(0), 1));
    
    // Cerebellum
    NeuronGroup cerebellum = new NeuronGroup(network, 5);
    cerebellum.setLabel("Cerebellum");
    cerebellum.setNeuronType(generalRule);
    cerebellum.setLocation(175, 125);
    network.addGroup(cerebellum);    
    cerebellum.getNeuronList().get(0).setLabel("Purkinje");
    cerebellum.getNeuronList().get(0).offset(25,0);
	cerebellum.getNeuronList().get(0).forceSetActivation(0.4);
    cerebellum.getNeuronList().get(1).setLabel("DCNe");
	cerebellum.getNeuronList().get(1).setUpdateRule(DCNRule);
    cerebellum.getNeuronList().get(1).offset(-50,75);
    cerebellum.getNeuronList().get(2).setLabel("DCNi");
	cerebellum.getNeuronList().get(2).setUpdateRule(DCNRule);
    cerebellum.getNeuronList().get(2).offset(-50,75);
    cerebellum.getNeuronList().get(3).setLabel("Granule");
    cerebellum.getNeuronList().get(3).offset(-50,75);
    cerebellum.getNeuronList().get(4).setLabel("Granule");
    cerebellum.getNeuronList().get(4).offset(-50,75);
    cerebellum.setLowerBound(0);
    
    // Purkinje to DCN and Granule to Purkinje
    network.addSynapse(new Synapse(cerebellum.getNeuronList().get(0), cerebellum.getNeuronList().get(1), -2));
    network.addSynapse(new Synapse(cerebellum.getNeuronList().get(0), cerebellum.getNeuronList().get(2), -2));
    network.addSynapse(new Synapse(cerebellum.getNeuronList().get(3), cerebellum.getNeuronList().get(0), 0.02));
    network.addSynapse(new Synapse(cerebellum.getNeuronList().get(4), cerebellum.getNeuronList().get(0), 0.02));
    
    // DCNe to RedNucleus
    network.addSynapse(new Synapse(cerebellum.getNeuronList().get(1), redNucleus.getNeuronList().get(1), 1));

    // DCNi to inferior Olive
    network.addSynapse(new Synapse(cerebellum.getNeuronList().get(2), inferiorOlive, -1));

    // Inferior Olive to DCN, Pukinje
    network.addSynapse(new Synapse(inferiorOlive, cerebellum.getNeuronList().get(0), 0.3));
    network.addSynapse(new Synapse(inferiorOlive, cerebellum.getNeuronList().get(1), 1));
    network.addSynapse(new Synapse(inferiorOlive, cerebellum.getNeuronList().get(2), 1));
    
    // // DCNe to Thalamus
    // network.addSynapse(new Synapse(cerebellum.getNeuronList().get(1), thalamus, 1));
    
    // From Spinal Cord
    NeuronGroup fromSpinalCord = new NeuronGroup(network, 2);
    fromSpinalCord.setLabel("From Spinal Cord");
	fromSpinalCord.setClamped(true);
    fromSpinalCord.setNeuronType(generalRule);
    fromSpinalCord.setLocation(275, 300);
    fromSpinalCord.setLowerBound(0);
    network.addGroup(fromSpinalCord);
	fromSpinalCord.getNeuronList().get(0).setLabel("Go");
	fromSpinalCord.getNeuronList().get(1).setLabel("No Go");
    
    // From Spinal Cord to Granules
    network.addSynapse(new Synapse(fromSpinalCord.getNeuronList().get(0), cerebellum.getNeuronList().get(3), 1));
    network.addSynapse(new Synapse(fromSpinalCord.getNeuronList().get(1), cerebellum.getNeuronList().get(4), 1));

    // DA
    Neuron dopamine = new Neuron(network);
    dopamine.setLabel("Basal Ganglia (GPi)");
    dopamine.setLocation(150, 50);
    // dopamine.setLowerBound(0);
    network.addNeuron(dopamine);
    
    // DA to Thalamus
    network.addSynapse(new Synapse(dopamine, thalamus, 1));

    // Target
    Neuron target = new Neuron(network);
    target.setLabel("Target");
	target.setClamped(true);
    // target.setUpdateRule(targetRule);
    target.setLocation(240, 50);
    // target.setLowerBound(0);
    network.addNeuron(target);
	
	// Labels
	NetworkTextObject parallelFiberLabel = new NetworkTextObject(network, 230, 150, "Parallel Fibers");
	NetworkTextObject mossyFiberLabel = new NetworkTextObject(network, 265, 240, "Mossy Fibers");
	NetworkTextObject mossyFiberLabel = new NetworkTextObject(network, 191, 160, "CF");
	// NetworkTextObject goInputLabel = new NetworkTextObject(network, 266, 320, "Go");
	// NetworkTextObject noGoInputLabel = new NetworkTextObject(network, 308, 320, "No Go");
	network.addText(parallelFiberLabel);
	network.addText(mossyFiberLabel);
	// network.addText(goInputLabel);
	// network.addText(noGoInputLabel);
		
}

//
// Load the custom network updater
//
void loadCustomUpdater() {

    // References
    Network network = ((NetworkComponent) workspace.getComponent("Cerebellum")).getNetwork();
    Neuron dopamine = network.getNeuronByLabel("Basal Ganglia (GPi)");
    Neuron output = network.getNeuronByLabel("Output");
    Neuron target = network.getNeuronByLabel("Target");
    Neuron purkinje = network.getNeuronByLabel("Purkinje");
    List<Synapse> p_fibers = purkinje.getFanIn();
    Neuron i_olive = network.getNeuronByLabel("Inferior Olive");

    // Variables
    double eta = 0.01;
    double alpha = 2; // TODO: This should be based on a running average?
    double xi = 1;// Balances alpha with c (climbing fiber activity). TODO. Not sure what         
                    // to set it to!
    double gamma = 0.5; // Basal ganglia time constant
    double zeta = 0.5; // BG damped target time constant
    double dampedTarget = 0;
    double alphaTimeConstant = 0.1; // running average constant for alpha

    NetworkUpdateAction networkUpdateAction = new NetworkUpdateAction() {
        public String getDescription() {
          return "Update basal ganglia";
        }

        public String getLongDescription() {
            return "Update basal ganglia";
        }

        public void invoke() {
			if (toggleLearning){
				dampedTarget + zeta * (target.getActivation() - dampedTarget);                    
				// dampedTarget = target.getActivation();
				// double dopDelt = gamma * (dampedTarget - output.getActivation());                    
				// dopamine.setInputValue(dopamine.getActivation() + dopDelt);
				dopamine.setInputValue(target.getActivation() - output.getActivation());
				
				// Update parallel fiber weights
				for(Synapse p_fiber : p_fibers) {
					if (!p_fiber.getSource().getLabel().equalsIgnoreCase("Inferior Olive")) {
						double delta_w = eta * p_fiber.getSource().getActivation() * (alpha 
							- xi * i_olive.getActivation());
						p_fiber.setStrength(p_fiber.getStrength() + delta_w);
					}
				}
				
				// Update Alpha (stable IO firing rate)
				alpha = (1 - alphaTimeConstant) * i_olive.getActivation() + alpha * alphaTimeConstant;
				System.out.println("IO: " + i_olive.getActivation() + " | alpha:" + alpha);
				//System.out.println("Target: " + target.getActivation() + " | Damped Target:" + dampedTarget + " | Damped Damped DA:" + dopamine.getActivation());   
			}			
        }

      };
  network.addUpdateAction(networkUpdateAction);
  
  // Moves the custom update to the top of the update sequence
  network.getUpdateManager().swapElements(6,0);
}

//
// Slider bar listener
//
class SliderListener implements ChangeListener {
	public void stateChanged(ChangeEvent e) {
		JSlider source = (JSlider)e.getSource();
		if (!source.getValueIsAdjusting()) {
			currentTrialLength = (int)source.getValue();
		}
	}
}

//
// Make button panels
//
void makeButtons() {
    LabelledItemPanel panel = new LabelledItemPanel();
    Network network = ((NetworkComponent) workspace.getComponent("Cerebellum")).getNetwork();
    NeuronGroup inputs  = network.getGroupByLabel("From Spinal Cord");
    Neuron target  = network.getNeuronByLabel("Target");
    Neuron dopamine  = network.getNeuronByLabel("Basal Ganglia (GPi)");

	// Just give the input of each to the model, without giving it a target (and hence no Dopamine)
    JButton btnReaction = new JButton("No Dopamine");
	btnReaction.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent arg0) {
                Executors.newSingleThreadExecutor().execute(new Runnable() {
                    public void run() {
                        inputs.getNeuronList().get(0).forceSetActivation(1);
                        inputs.getNeuronList().get(1).forceSetActivation(0);
                        // Turn off dopamine! 
						dopamine.forceSetActivation(0);                 
                        dopamine.setClamped(true);
						// Turn off learning
						toggleLearning = false;
                        CountDownLatch latch = new CountDownLatch(1);
                        workspace.iterate(latch, currentTrialLength/2);
                        try {
                            latch.await();
                        } catch (InterruptedException e) {
                             e.printStackTrace();
                        }

                        inputs.getNeuronList().get(0).forceSetActivation(0);
                        inputs.getNeuronList().get(1).forceSetActivation(1);
                        CountDownLatch latch = new CountDownLatch(1);
                        workspace.iterate(latch, currentTrialLength/2);
                        try {
                            latch.await();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
						dopamine.setClamped(false);
						toggleLearning = true;
                    }
                    });

             }});
    panel.addItem("Test", btnReaction);

        JButton button1 = new JButton("One Trial");
    button1.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent arg0) {
                Executors.newSingleThreadExecutor().execute(new Runnable() {
                    public void run() {
                        inputs.getNeuronList().get(0).forceSetActivation(1);
                        inputs.getNeuronList().get(1).forceSetActivation(0);
                        target.forceSetActivation(1);                 
                        CountDownLatch latch = new CountDownLatch(1);
                        workspace.iterate(latch, currentTrialLength/2);
                        try {
                            latch.await();
                        } catch (InterruptedException e) {
                             e.printStackTrace();
                        }

                        inputs.getNeuronList().get(0).forceSetActivation(0);
                        inputs.getNeuronList().get(1).forceSetActivation(1);
                        target.forceSetActivation(0);
                        CountDownLatch latch = new CountDownLatch(1);
                        workspace.iterate(latch, currentTrialLength/2);
                        try {
                            latch.await();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    });

             }});
    panel.addItem("Train", button1);
	
	
    JButton button0 = new JButton("10 Trials");
    button0.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent arg0) {
                Executors.newSingleThreadExecutor().execute(new Runnable() {
                    public void run() {
						for (int ii = 0; ii <= 10; ii++) {
							inputs.getNeuronList().get(0).forceSetActivation(1);
							inputs.getNeuronList().get(1).forceSetActivation(0);
							target.forceSetActivation(1);                 
							CountDownLatch latch = new CountDownLatch(1);
							workspace.iterate(latch, currentTrialLength/2);
							try {
								latch.await();
							} catch (InterruptedException e) {
								 e.printStackTrace();
							}

							inputs.getNeuronList().get(0).forceSetActivation(0);
							inputs.getNeuronList().get(1).forceSetActivation(1);
							target.forceSetActivation(0);
							CountDownLatch latch = new CountDownLatch(1);
							workspace.iterate(latch, currentTrialLength/2);
							try {
								latch.await();
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
                    }
                    });

             }});
    panel.addItem("Train", button0);
	
	
	// // Individual trial runs
    // JButton button2 = new JButton("Train Pattern 1");
    // button2.addActionListener(new ActionListener() {
        // public void actionPerformed(ActionEvent arg0) {
            // inputs.getNeuronList().get(0).forceSetActivation(1);
            // inputs.getNeuronList().get(1).forceSetActivation(0);
            // target.forceSetActivation(1);
            // workspace.iterate(currentTrialLength/2);
        // }});
    // //panel.addItem("Pattern 1", button2);

    // JButton button3 = new JButton("Train Pattern 2");
    // button3.addActionListener(new ActionListener() {
        // public void actionPerformed(ActionEvent arg0) {
            // inputs.getNeuronList().get(0).forceSetActivation(0);
            // inputs.getNeuronList().get(1).forceSetActivation(1);
            // target.forceSetActivation(0);
            // workspace.iterate(currentTrialLength/2);
        // }});
    // //panel.addItem("Pattern 2", button3);

	// JSlider to manually set for how long it runs for
	JSlider trialLengthSlider = new JSlider(JSlider.HORIZONTAL, 200, 400, currentTrialLength);
	trialLengthSlider.addChangeListener(new SliderListener());
	//Turn on labels at major tick marks.
	trialLengthSlider.setMajorTickSpacing(50);
	trialLengthSlider.setMinorTickSpacing(10);
	trialLengthSlider.setPaintTicks(true);
	trialLengthSlider.setPaintLabels(true);
	trialLengthSlider.setSnapToTicks(true);
    panel.addItem("Trial Length", trialLengthSlider);
	
    // Set up Frame
    JInternalFrame internalFrame = new JInternalFrame("Train / Test", true, true);
    internalFrame.setLocation(7,350);
    internalFrame.getContentPane().add(panel);
    internalFrame.setVisible(true);
    internalFrame.pack();
    desktop.addInternalFrame(internalFrame);
}
//
// Add the time series component
//
void addTimeSeries() {

    NetworkComponent networkComponent = ((NetworkComponent) workspace.getComponent("Cerebellum"));
	Network network = networkComponent.getNetwork();

	// Make time series chart
    TimeSeriesPlotComponent chart = new TimeSeriesPlotComponent("Timeseries", 2);
    chart.getModel().setAutoRange(false);
    chart.getModel().setRangeUpperBound(1);
    chart.getModel().setRangeLowerBound(-1);
    workspace.addWorkspaceComponent(chart);
    desktop.getDesktopComponent(chart).getParentFrame().setBounds(880,8,380,300);
	
	// Couple network to time series
    PotentialProducer neuronProducer1 = NetworkComponent.getNeuronProducer(networkComponent, network.getNeuronByLabel("Output"), "getActivation");
    PotentialConsumer timeSeriesConsumer1 = chart.getPotentialConsumers().get(0);
    workspace.getCouplingManager().addCoupling(new Coupling(neuronProducer1, timeSeriesConsumer1));
    PotentialProducer neuronProducer2 =  NetworkComponent.getNeuronProducer(networkComponent, network.getNeuronByLabel("Basal Ganglia (GPi)"), "getActivation");
    PotentialConsumer timeSeriesConsumer2 = chart.getPotentialConsumers().get(1);
    workspace.getCouplingManager().addCoupling(new Coupling(neuronProducer2, timeSeriesConsumer2));

}


//
// Make doc viewer
//
void addDocViewer() {
	DocViewerComponent docViewer = new DocViewerComponent("Information");
	docViewer.setText("<h1>Cerebellum Model</h1>" +
        "A model developed by Charles C. Peck, Tyler Streeter, and James Kozloski. Simbrain implementation by Jeff Rodny and Jeff Yoshimi." +
        "<br><br>" +
        "The model illustrates how novelty is initially processed by the basal ganglia and then transferred to the cerebellum." +
        "<br><br>" +
        "The model learns a spinal-cord > spinal-cord mapping, from the input on the lower-right to the output on the lower-left. It will be trained to associate a 'Go' signal with an output of 1 and 'No Go' signal with output of 0." +
        "<br><br>" +
        "Initially both signals have no learned output; they both give an output of 0. We can see this by pressing the 'Test: No Dopamine' button. In this mode the 'Basal Ganglia (GPi)' neuron is clamped to 0 and so it exerts no influence on the network.  In this mode, prior to training, notice that the same output is produced for activation of 'Go' and 'No Go' neurons; both produce zero output. " +
        "<br><br>" +
        "We can then train the model to produce the desired mapping from 'Go' to 1 and 'No Go' to 0, initially using the dopamine system.  On a trial of length 200 ('trial length' is number of iterations), the network is exposed to both patterns for 100 iterations.   For each of the two patterns an appropriate target value is set in the 'Target' neuron.  The 'Dopamine' neuron then registers the difference between the target value and the output value, i.e. the error.  This error then influences and 'corrects' the output via left Thalamus-Cortex-Spinal Cord connections.  Dopamine activity is visible in the blue time-series, and output activity in the red time series." +
        "<br><br>" +
        "Notice that the 'Dopamine' neuron affects output through the <u>left</u> 'To Spinal Cord' neuron.  The <u>right</u> 'To Spinal Cord' neuron is how the <u>cerebellum</u> affects output.  The cerebellum affects output through activation of the red nucleus and the major cerebellar neurons (DCN, Inferior Olive, Purkinje, Granule Cells)." +
        "<br><br>" +
        "Over time, the input output mapping will be transferred to cerebellum.  This happens via learning at the parallel fibers, the connections from the granule cells to the Purkinje cell, based on the activity of the outgoing synapses from the Purkinje cell (i.e Climbing Fibers (CF)). As Peck, Streeter, and Kolsloki say: 'Parallel fiber synapses undergo LTD when co-active with climbing fiber activity and LTP when active without coincident climbing fiber activity.'" +
        "<br><br>" +
        "To see this in action, press the 'Train: 10 Trials' button.  This causes 10 trials of dopamine-mediated learning to occur.  After the 10 trials are done, press the 'Test: No Dopamine' button. This inhibits dopamine-mediated learning.  But notice that the correct mapping now occurs, and is mediated by the cerebellar circuit.  The cerebellum has acquired the correct mapping." +
        "<br>" +
        "<h3>Summary: What to do to illustrate the model</hr><br>" +
        "<br>" +
        "<ol>" +
        "<li>Upon first opening the simulation, press the 'Test: No Dopamine' button to see the initial behavior of the cerebellum without targets or Dopamine intervention.  Notice in the time series that Dopamine (blue) stays flat, since it is not operating.  Notice that both inputs give the same output.</li>" +
        "<li>Now press the 'Train: 10 Trials' button. This will use the Dopamine system to train the model on the correct input-output pattern 10 times.</li>" +
        "<li>Press the 'Test: No Dopamine' button again. Now the correct input output patterns are produced without Dopmaine.  The cerebellum has learned the mapping.  Notice the correct oscillation of output (red) in the time series. </li>" +
        "</ol><br>" + 
        "Note: The Go and No Go nodes represent sparsified outputs of the granule cells hypothetically produced by more complex afferent projections. There are other simplifications and some misleading features of this simulation.   We hope to update it in a future release."
        );
    // TODO: Explain what time series is doing
    workspace.addWorkspaceComponent(docViewer);
    desktop.getDesktopComponent(docViewer).getParentFrame().setBounds(3,11,339,336);
		
}
	
// Run the simulation.
main();
