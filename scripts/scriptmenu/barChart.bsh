import java.awt.Point;
import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.layouts.LineLayout.LineOrientation;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.plot.barchart.*;
import org.simbrain.plot.barchart.BarChartComponent.BarChartConsumer;
import org.simbrain.util.randomizer.*;
import org.simbrain.workspace.*;
import java.awt.Color;

//
// A simple network whose dynamics are plotted in a barchart.
//
{

    // PARAMETERS
    int numNeurons = 10;
    double sparsity = .2;
    double excitatoryRatio = .5;

    // CLEAR CURRENT WORKSPACE
    workspace.clearWorkspace();

    // BUILD NETWORK
    NetworkComponent networkComponent = new NetworkComponent("Recurrent Network");
    workspace.addWorkspaceComponent(networkComponent);
    desktop.getDesktopComponent(networkComponent).getParentFrame().setBounds(20, 20, 446, 337);
    Network network = networkComponent.getNetwork();
    for (int i = 0; i < numNeurons; i++) {
        Neuron neuron = new Neuron(network, "DecayRule");
        neuron.setUpperBound(10);
        network.addNeuron(neuron);
    }

    // LAYOUT NEURONS
    LineLayout layout = new LineLayout(10,10,50, LineOrientation.HORIZONTAL);
    layout.layoutNeurons(network.getNeuronList());

    // CREATE SYNAPSES 
    Sparse.connectSparse(network.getFlatNeuronList(),
            network.getFlatNeuronList(), sparsity, false, false, true);
    ConnectionUtilities.randomizeAndPolarizeSynapses(network.getSynapseList(), excitatoryRatio);
    network.randomizeNeurons();
    network.fireNeuronsUpdated();
    network.fireSynapsesUpdated();

    //MAKE BARCHART
    BarChartComponent barChart = new BarChartComponent("Bar Chart of Recurrent Network", numNeurons);
    barChart.getModel().setBarColor(Color.blue);
    barChart.getModel().setAutoRange(false);
    barChart.getModel().setUpperBound(10);
    workspace.addWorkspaceComponent(barChart);
    desktop.getDesktopComponent(barChart).getParentFrame().setBounds(500, 20, 300,300);

    // COUPLING NETWORK TO BARCHART
    for (int i = 1; i <= numNeurons; i++) {
        PotentialProducer neuronAttribute = networkComponent.getAttributeManager().createPotentialProducer(network.getNeuron("Neuron_" + i), "getActivation", double.class); 
        PotentialConsumer barChartAttribute = barChart.getAttributeManager().createPotentialConsumer(barChart.getModel(), "setValue", new Class[]{double.class, Integer.class}, new Object[]{i-1});
        workspace.getCouplingManager().addCoupling(new Coupling(neuronAttribute, barChartAttribute));
    }

}