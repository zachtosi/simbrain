import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.synapse_update_rules.*;
import org.simbrain.workspace.*;
import org.simbrain.network.connections.*;
import org.simbrain.util.SimbrainConstants.Polarity;
import org.simbrain.util.randomizer.*;
import org.simbrain.util.math.*;

//
// Make a network of izhikevich neurons connected using a sparse connection.  Run and activate nodes with the wand to
// observe network dynamics.
//
// TODO: option to set responders, maybe delay
///
{

	// Parameters 
	int NUM_NEURONS = 49;
	double GRID_SPACE = 50;
	double SPARSITY = .05; // Percent of connections to make
	double excitatoryRatio = .15;
    boolean useSTDP = true;

	// Build Network
	NetworkComponent networkComponent = new NetworkComponent("Izhikevich Network");
	workspace.addWorkspaceComponent(networkComponent);
	Network network = networkComponent.getNetwork();

    // Template Neuron
    IzhikevichRule templateNeuron = new IzhikevichRule();
    templateNeuron.setA(.02);
    templateNeuron.setB(.2);
    templateNeuron.setC(-65);
    templateNeuron.setD(8);

    // Make neurons and lay them out
	for (int i = 0; i < NUM_NEURONS; i++) {
		Neuron neuron = new Neuron(network, templateNeuron.deepCopy());
	    network.addNeuron(neuron);
	}
    GridLayout layout = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    //layout.setInitialLocation(new Point(10, 10));
	layout.layoutNeurons(network.getNeuronList());

    // Connect and randomize neurons
    Sparse.connectSparse(network.getFlatNeuronList(),
            network.getFlatNeuronList(), SPARSITY, false, false, true);
    //sparseConnect.setBaseExcitatorySynapse(new Hebbian(null, null));
    PolarizedRandomizer exciteRand = new PolarizedRandomizer(Polarity.EXCITATORY);
    exciteRand.setPdf(ProbDistribution.NORMAL);
    exciteRand.setParam1(1); // Mean
    exciteRand.setParam2(.1); // STD
    PolarizedRandomizer inhibRand = new PolarizedRandomizer(Polarity.INHIBITORY);
    inhibRand.setPdf(ProbDistribution.NORMAL);
    inhibRand.setParam1(5); 
    inhibRand.setParam2(.1);
    ConnectionUtilities.randomizeAndPolarizeSynapses(network.getFlatSynapseList(), 
        exciteRand, inhibRand, excitatoryRatio);

    // Set synapses to STDP if requested
    if (useSTDP) {
        for(Synapse synapse : network.getFlatSynapseList()) {
            synapse.setLearningRule(new STDPRule());
        }
    }

    // Update network panel
    network.randomizeNeurons();
    network.fireNeuronsUpdated();

}
