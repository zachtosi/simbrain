import java.awt.geom.Point2D;
import java.util.*;
import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.core.NeuronUpdateRule.InputType;
import org.simbrain.network.groups.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neurons.*;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.synapse_update_rules.*;
import org.simbrain.network.synapse_update_rules.spikeresponders.*;
import org.simbrain.network.update_actions.*;
import org.simbrain.util.randomizer.*;
import org.simbrain.util.SimbrainConstants.Polarity;
import org.simbrain.util.math.*;
import org.simbrain.workspace.*;

{

    // Simulation Parameters
    int NUM_NEURONS = 1024; // 4096
    int GRID_SPACE = 25;
    int RADIUS = 100; // 200
    int KIN = 10; // 41
    int REFRACTORY = 10;
    double SPONTANEOUS_ACT = 10E-5; // 10E-5
    double KAPPA = 0.9; // 0.9
    double B_VALUE = 1.6;





    // Build Network
    NetworkComponent networkComponent = new NetworkComponent("Network");
    workspace.addWorkspaceComponent(networkComponent);
    Network network = networkComponent.getNetwork();
    network.setTimeStep(0.5);
    HexagonalGridLayout layout = new HexagonalGridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    layout.setInitialLocation(new Point(10, 10));
    List<Neuron> neurons = new ArrayList<Neuron>(NUM_NEURONS);
    List<Neuron> outNeurons = new ArrayList<Neuron>(NUM_NEURONS);
    for (int i = 0; i < NUM_NEURONS; i++) {
        Neuron neuron = new Neuron(network);
        neuron.setPolarity(Polarity.EXCITATORY);
        TimedAccumulatorRule tar = new TimedAccumulatorRule();
        tar.setInputType(InputType.WEIGHTED);
        tar.setMaxState(REFRACTORY);
        tar.setKappa(KAPPA);
        tar.setB(B_VALUE);
        tar.setBaseProb(SPONTANEOUS_ACT);
        neuron.setUpdateRule(tar);
        neurons.add(neuron);
    }
    NeuronGroup ng1 = new NeuronGroup(network, neurons);
    ng1.setLabel("CorticalBranching");
    network.addGroup(ng1);
    ng1.setLayout(layout);
    ng1.applyLayout(new Point2D.Double(0.0 ,0.0));
    
    PolarizedRandomizer exRand = new PolarizedRandomizer(Polarity.EXCITATORY,
        ProbDistribution.LOGNORMAL);
    PolarizedRandomizer inRand = new PolarizedRandomizer(Polarity.INHIBITORY,
        ProbDistribution.UNIFORM);
    exRand.setParam1(2);
    exRand.setParam2(1);
    inRand.setParam1(1.5);  
    inRand.setParam2(3);

    RadialSimpleConstrainedKIn con = new RadialSimpleConstrainedKIn(KIN, RADIUS);
    SynapseGroup sg = SynapseGroup.createSynapseGroup(ng1, ng1, con, 1.0, exRand, inRand);
    sg.setLabel("Recurrent Synapses");
    network.addGroup(sg);
    for (Neuron n : ng1.getNeuronList()) {
        ((TimedAccumulatorRule) n.getUpdateRule()).init(n);
    }

    print(sg.size());
    
    sg.setUpperBound(200, Polarity.EXCITATORY);
    sg.setLowerBound(0, Polarity.EXCITATORY);
    sg.setLowerBound(-200, Polarity.INHIBITORY);
    sg.setUpperBound(0, Polarity.INHIBITORY);
    network.getUpdateManager().clear();
    network.getUpdateManager().addAction(ConcurrentBufferedUpdate.createConcurrentBufferedUpdate(network));

}
